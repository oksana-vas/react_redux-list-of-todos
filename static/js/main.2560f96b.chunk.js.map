{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","api.ts","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","newStatus","newQuery","filterReducer","query","status","All","newTodos","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","currentStatus","currentQuery","filteredTodos","useMemo","items","queryValue","filteredByStatus","item","Active","completed","Completed","trim","title","toLowerCase","includes","filterTodos","length","className","map","id","classNames","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","onChange","filterActions","target","value","placeholder","style","pointerEvents","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Loader","TodoModal","useState","isLoading","setIsLoading","user","setUser","useEffect","userId","catch","Error","finally","href","email","name","App","response","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2560f96b.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = {\n  type: 'currentStatus/SET',\n  payload: Status,\n};\n\ntype SetQueryAction = {\n  type: 'currentQuery/SET',\n  payload: string,\n};\n\nconst setStatus = (newStatus: Status): SetStatusAction => ({\n  type: 'currentStatus/SET',\n  payload: newStatus,\n});\n\nconst setQuery = (newQuery: string): SetQueryAction => ({\n  type: 'currentQuery/SET',\n  payload: newQuery,\n});\n\nexport const actions = { setStatus, setQuery };\n\ntype Action = SetStatusAction | SetQueryAction;\ntype State = {\n  query: string,\n  status: Status,\n};\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: Status.All,\n  },\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentStatus/SET':\n      return { ...state, status: action.payload };\n\n    case 'currentQuery/SET':\n      return { ...state, query: action.payload };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'currentTodos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (newTodos: Todo[]): SetTodosAction => ({\n  type: 'currentTodos/SET',\n  payload: newTodos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: SetTodosAction,\n): Todo[] => {\n  if (action.type === 'currentTodos/SET') {\n    return action.payload;\n  }\n\n  return state;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useMemo } from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { Todo } from '../../types/Todo';\nimport { Status } from '../../types/Status';\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const currentStatus = useAppSelector(state => state.filter.status);\n  const currentQuery = useAppSelector(state => state.filter.query);\n\n  const handleOpenModal = (chosenTodo: Todo) => {\n    dispatch(currentTodoActions.setTodo(chosenTodo));\n  };\n\n  function filterTodos(\n    items: Todo[],\n    status: Status,\n    queryValue: string,\n  ) {\n    const filteredByStatus = items.filter(item => {\n      switch (status) {\n        case Status.Active:\n          return !item.completed;\n\n        case Status.Completed:\n          return item.completed;\n\n        case Status.All:\n        default:\n          return item;\n      }\n    });\n\n    if (queryValue.trim()) {\n      return filteredByStatus.filter(item => {\n        return item.title.toLowerCase()\n          .includes(queryValue?.trim().toLowerCase());\n      });\n    }\n\n    return filteredByStatus;\n  }\n\n  const filteredTodos = useMemo(() => {\n    return filterTodos(todos, currentStatus, currentQuery);\n  }, [todos, currentStatus, currentQuery]);\n\n  return (\n    <>\n      {!filteredTodos.length && currentQuery && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      <table className=\"table is-narrow is-fullwidth\">\n        <thead>\n          <tr>\n            <th>#</th>\n\n            <th>\n              <span className=\"icon\">\n                <i className=\"fas fa-check\" />\n              </span>\n            </th>\n\n            <th>Title</th>\n            <th> </th>\n          </tr>\n        </thead>\n        <tbody>\n          {filteredTodos.map(todo => {\n            const { id, title, completed } = todo;\n\n            return (\n              <tr data-cy=\"todo\">\n                <td className=\"is-vcentered\">{id}</td>\n                <td className=\"is-vcentered\">\n                  {completed && (\n                    <span\n                      className=\"icon\"\n                      data-cy=\"iconCompleted\"\n                    >\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames({\n                      'has-text-success': completed,\n                      'has-text-danger': !completed,\n                    })}\n                  >\n                    {title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleOpenModal(todo)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames('far', {\n                          'fa-eye': currentTodo !== todo,\n                          'fa-eye-slash': currentTodo === todo,\n                        })}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleClearQuery = () => {\n    dispatch(filterActions.setQuery(''));\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleStatusSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={handleStatusSelect}\n          >\n            <option value={Status.All}>\n              All\n            </option>\n\n            <option value={Status.Active}>\n              Active\n            </option>\n\n            <option value={Status.Completed}>\n              Completed\n            </option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        {query && (\n          <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleClearQuery}\n            />\n          </span>\n        )}\n      </p>\n    </form>\n  );\n};\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport { getUser } from '../../api';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { Loader } from '../Loader';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(true);\n  const [user, setUser] = useState<User>();\n\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  const handleCloseModal = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    if (currentTodo?.userId) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .catch(() => {\n          throw new Error('Please try again later');\n        })\n        .finally(() => setIsLoading(false));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleCloseModal}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-success\">\n                  Done\n                </strong>\n              ) : (\n                <strong className=\"has-text-danger\">\n                  Planned\n                </strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user?.email}`}>\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\nimport { actions } from './features/todos';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const dispatch = useAppDispatch();\n\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((response) => {\n        dispatch(actions.setTodos(response));\n      })\n      .catch(() => {\n        throw new Error('Please try again later');\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && (<Loader />)}\n              <TodoList />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && (<TodoModal />)}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}